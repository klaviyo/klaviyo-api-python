# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

    The version of the OpenAPI document: 2025-04-15
    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_metadata import DeviceMetadata
from typing import Optional, Set
from typing_extensions import Self

class PushTokenResponseObjectResourceAttributes(BaseModel):
    """
    PushTokenResponseObjectResourceAttributes
    """ # noqa: E501
    created: Optional[datetime] = Field(description="The time at which the token was created")
    token: Optional[StrictStr] = Field(description="The push token")
    enablement_status: Optional[StrictStr] = Field(description="The enablement status of the push token")
    platform: Optional[StrictStr] = Field(description="The platform of the push token('ios', 'android')")
    vendor: Optional[StrictStr] = Field(description="The vendor of the push token('APNs', 'FCM')")
    background: Optional[StrictStr] = Field(description="The background state of the push token")
    recorded_date: Optional[StrictStr] = Field(description="The date the push token was recorded")
    metadata: Optional[DeviceMetadata] = None
    __properties: ClassVar[List[str]] = ["created", "token", "enablement_status", "platform", "vendor", "background", "recorded_date", "metadata"]

    @field_validator('enablement_status')
    def enablement_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTHORIZED', 'DENIED', 'NOT_DETERMINED', 'PROVISIONAL', 'UNAUTHORIZED']):
            raise ValueError("must be one of enum values ('AUTHORIZED', 'DENIED', 'NOT_DETERMINED', 'PROVISIONAL', 'UNAUTHORIZED')")
        return value

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['android', 'ios']):
            raise ValueError("must be one of enum values ('android', 'ios')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PushTokenResponseObjectResourceAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if token (nullable) is None
        # and model_fields_set contains the field
        if self.token is None and "token" in self.model_fields_set:
            _dict['token'] = None

        # set to None if enablement_status (nullable) is None
        # and model_fields_set contains the field
        if self.enablement_status is None and "enablement_status" in self.model_fields_set:
            _dict['enablement_status'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if vendor (nullable) is None
        # and model_fields_set contains the field
        if self.vendor is None and "vendor" in self.model_fields_set:
            _dict['vendor'] = None

        # set to None if background (nullable) is None
        # and model_fields_set contains the field
        if self.background is None and "background" in self.model_fields_set:
            _dict['background'] = None

        # set to None if recorded_date (nullable) is None
        # and model_fields_set contains the field
        if self.recorded_date is None and "recorded_date" in self.model_fields_set:
            _dict['recorded_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PushTokenResponseObjectResourceAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "token": obj.get("token"),
            "enablement_status": obj.get("enablement_status"),
            "platform": obj.get("platform"),
            "vendor": obj.get("vendor"),
            "background": obj.get("background"),
            "recorded_date": obj.get("recorded_date"),
            "metadata": DeviceMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj


