# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

    The version of the OpenAPI document: 2025-01-15
    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UniversalContentResponseObjectResourceAttributes(BaseModel):
    """
    UniversalContentResponseObjectResourceAttributes
    """ # noqa: E501
    name: Optional[StrictStr] = Field(description="The name for this universal content")
    definition: Dict[str, Any]
    created: Optional[datetime] = Field(description="The datetime when this universal content was created")
    updated: Optional[datetime] = Field(description="The datetime when this universal content was updated")
    screenshot_status: Optional[StrictStr] = Field(description="The status of a universal content screenshot.")
    screenshot_url: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["name", "definition", "created", "updated", "screenshot_status", "screenshot_url"]

    @field_validator('screenshot_status')
    def screenshot_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['completed', 'failed', 'generating', 'never_generated', 'not_renderable']):
            raise ValueError("must be one of enum values ('completed', 'failed', 'generating', 'never_generated', 'not_renderable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UniversalContentResponseObjectResourceAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['updated'] = None

        # set to None if screenshot_status (nullable) is None
        # and model_fields_set contains the field
        if self.screenshot_status is None and "screenshot_status" in self.model_fields_set:
            _dict['screenshot_status'] = None

        # set to None if screenshot_url (nullable) is None
        # and model_fields_set contains the field
        if self.screenshot_url is None and "screenshot_url" in self.model_fields_set:
            _dict['screenshot_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UniversalContentResponseObjectResourceAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "definition": obj.get("definition"),
            "created": obj.get("created"),
            "updated": obj.get("updated"),
            "screenshot_status": obj.get("screenshot_status"),
            "screenshot_url": obj.get("screenshot_url")
        })
        return _obj


