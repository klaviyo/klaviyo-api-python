# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

    The version of the OpenAPI document: 2024-06-15
    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.static_schedule_options import StaticScheduleOptions
from openapi_client.models.sto_schedule_options import STOScheduleOptions
from openapi_client.models.throttled_schedule_options import ThrottledScheduleOptions
from typing import Optional, Set
from typing_extensions import Self

class SendStrategySubObject(BaseModel):
    """
    SendStrategySubObject
    """ # noqa: E501
    method: StrictStr = Field(description="Describes the shape of the options object. Allowed values: ['static', 'throttled', 'immediate', 'smart_send_time']")
    options_static: Optional[StaticScheduleOptions] = None
    options_throttled: Optional[ThrottledScheduleOptions] = None
    options_sto: Optional[STOScheduleOptions] = None
    __properties: ClassVar[List[str]] = ["method", "options_static", "options_throttled", "options_sto"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendStrategySubObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options_static
        if self.options_static:
            _dict['options_static'] = self.options_static.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options_throttled
        if self.options_throttled:
            _dict['options_throttled'] = self.options_throttled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options_sto
        if self.options_sto:
            _dict['options_sto'] = self.options_sto.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendStrategySubObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "method": obj.get("method"),
            "options_static": StaticScheduleOptions.from_dict(obj["options_static"]) if obj.get("options_static") is not None else None,
            "options_throttled": ThrottledScheduleOptions.from_dict(obj["options_throttled"]) if obj.get("options_throttled") is not None else None,
            "options_sto": STOScheduleOptions.from_dict(obj["options_sto"]) if obj.get("options_sto") is not None else None
        })
        return _obj


