# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.

    The version of the OpenAPI document: 2024-07-15
    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_camera_dto import AdditionalCameraDTO
from typing import Optional, Set
from typing_extensions import Self

class PhotosDTOObjectResourceExtendedAttributes(BaseModel):
    """
    PhotosDTOObjectResourceExtendedAttributes
    """ # noqa: E501
    title: Optional[StrictStr]
    location: Optional[StrictStr]
    date_taken: Optional[date]
    datetime_taken: Optional[datetime]
    exif: Optional[Dict[str, Any]] = None
    non_filterable_photo_field: Optional[StrictStr] = None
    additional_camera_field: Optional[AdditionalCameraDTO] = None
    __properties: ClassVar[List[str]] = ["title", "location", "date_taken", "datetime_taken", "exif", "non_filterable_photo_field", "additional_camera_field"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhotosDTOObjectResourceExtendedAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_camera_field
        if self.additional_camera_field:
            _dict['additional_camera_field'] = self.additional_camera_field.to_dict()
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if date_taken (nullable) is None
        # and model_fields_set contains the field
        if self.date_taken is None and "date_taken" in self.model_fields_set:
            _dict['date_taken'] = None

        # set to None if datetime_taken (nullable) is None
        # and model_fields_set contains the field
        if self.datetime_taken is None and "datetime_taken" in self.model_fields_set:
            _dict['datetime_taken'] = None

        # set to None if exif (nullable) is None
        # and model_fields_set contains the field
        if self.exif is None and "exif" in self.model_fields_set:
            _dict['exif'] = None

        # set to None if non_filterable_photo_field (nullable) is None
        # and model_fields_set contains the field
        if self.non_filterable_photo_field is None and "non_filterable_photo_field" in self.model_fields_set:
            _dict['non_filterable_photo_field'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhotosDTOObjectResourceExtendedAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "location": obj.get("location"),
            "date_taken": obj.get("date_taken"),
            "datetime_taken": obj.get("datetime_taken"),
            "exif": obj.get("exif"),
            "non_filterable_photo_field": obj.get("non_filterable_photo_field"),
            "additional_camera_field": AdditionalCameraDTO.from_dict(obj["additional_camera_field"]) if obj.get("additional_camera_field") is not None else None
        })
        return _obj


