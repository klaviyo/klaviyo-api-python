# coding: utf-8

"""
    Klaviyo API

    The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.  # noqa: E501

    The version of the OpenAPI document: 2023-07-15
    Contact: developers@klaviyo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class MetricCreateQueryResourceObjectAttributes(BaseModel):
    """
    MetricCreateQueryResourceObjectAttributes
    """
    name: Optional[StrictStr] = Field(..., description="Name of the event. Must be less than 128 characters.")
    service: Optional[StrictStr] = Field(None, description="This is for advanced usage. For api requests, this should use the default, which is set to api.")
    __properties = ["name", "service"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MetricCreateQueryResourceObjectAttributes:
        """Create an instance of MetricCreateQueryResourceObjectAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if service (nullable) is None
        # and __fields_set__ contains the field
        if self.service is None and "service" in self.__fields_set__:
            _dict['service'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MetricCreateQueryResourceObjectAttributes:
        """Create an instance of MetricCreateQueryResourceObjectAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MetricCreateQueryResourceObjectAttributes.parse_obj(obj)

        _obj = MetricCreateQueryResourceObjectAttributes.parse_obj({
            "name": obj.get("name"),
            "service": obj.get("service")
        })
        return _obj

